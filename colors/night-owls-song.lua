------------------------------------
-- Reset the old syntax highlight --
------------------------------------
vim.cmd('highlight clear')
vim.cmd('syntax reset')

--------------------------
-- General Settings --
--------------------------
vim.o.termguicolors = true
vim.g.colors_name = 'night-owls-song'

local set = vim.api.nvim_set_hl
local c = require('night-owls-song.color')

---------------------
-- List of modules --
---------------------
local modules = {
    'syntax',
    'interface',
    'diagnostic',
    'nvim-tree',
    'git',
}

------------
-- Import --
------------
for _, module in ipairs(modules) do
    require('night-owls-song.' .. module)
end

---------------------
-- Clear the cache --
---------------------
for _, module in ipairs(modules) do
    package.loaded['night-owls-song.' .. module] = nil
end

set(0, 'ColorColumn', { link = 'CursorLine' })
set(0, 'ComplMatchIns', {})
set(0, 'Conceal', {})
set(0, 'Conditional', {})
set(0, '@constructor', {})
set(0, 'Debug', {})
set(0, 'Define', {})
set(0, 'Delimiter', {})

set(0, 'DiagnosticDeprecated', {})
set(0, 'DiagnosticError', {})
set(0, 'DiagnosticFloatingError', {})
set(0, 'DiagnosticFloatingHint', {})
set(0, 'DiagnosticFloatingInfo', {})
set(0, 'DiagnosticFloatingOk', {})
set(0, 'DiagnosticFloatingWarn', {})
set(0, 'DiagnosticHint', {})
set(0, 'DiagnosticInfo', {})
set(0, 'DiagnosticOk', {})
set(0, 'DiagnosticSignError', {})
set(0, 'DiagnosticSignHint', {})
set(0, 'DiagnosticSignInfo', {})
set(0, 'DiagnosticSignOk', {})
set(0, 'DiagnosticSignWarn', {})
set(0, 'DiagnosticUnnecessary', { fg = GREY_600 })
set(0, 'DiagnosticWarn', {})

-- Virtual line
set(0, 'DiagnosticVirtualLinesError', {})
set(0, 'DiagnosticVirtualLinesHint', {})
set(0, 'DiagnosticVirtualLinesInfo', {})
set(0, 'DiagnosticVirtualLinesOk', {})
set(0, 'DiagnosticVirtualLinesWarn', {})
set(0, 'DiagnosticVirtualTextError', {})
set(0, 'DiagnosticVirtualTextHint', {})
set(0, 'DiagnosticVirtualTextInfo', {})
set(0, 'DiagnosticVirtualTextOk', {})
set(0, 'DiagnosticVirtualTextWarn', {})

----------
-- Diff --
----------
set(0, 'Added', { fg = c.green, bold = true })
set(0, 'Changed', { fg = c.yellow, bold = true })
set(0, 'Removed', { fg = c.red, bold = true })
set(0, 'DiffAdd', { link = 'Added' })
set(0, 'DiffChange', { link = 'Changed' })
set(0, 'DiffDelete', { link = 'Removed' })
set(0, '@diff', {})
set(0, '@diff.delta', {})
set(0, '@diff.minus', {})
set(0, '@diff.plus', {})
set(0, 'DiffText', {})

set(0, 'Directory', {})
set(0, 'Error', {})
set(0, 'Exception', {})
set(0, 'FloatBorder', {})
set(0, 'Float', {})
set(0, 'FloatFooter', {})
set(0, 'FloatShadow', {})
set(0, 'FloatShadowThrough', {})
set(0, 'FloatTitle', {})
set(0, 'FoldColumn', {})
set(0, 'Folded', {})

set(0, 'Ignore', {})
set(0, 'Include', {})

set(0, 'Keyword', {})
set(0, '@label', {})
set(0, 'Label', {})
set(0, 'lCursor', {})
set(0, 'LspCodeLens', {})
set(0, 'LspCodeLensSeparator', {})
set(0, '@lsp', {})
set(0, 'LspInlayHint', {})
set(0, '@lsp.mod.deprecated', {})
set(0, 'LspReferenceRead', {})
set(0, 'LspReferenceTarget', {})
set(0, 'LspReferenceText', {})
set(0, 'LspReferenceWrite', {})
set(0, 'LspSignatureActiveParameter', {})
set(0, '@lsp.type.class', {})
set(0, '@lsp.type.decorator', {})
set(0, '@lsp.type.enum', {})
set(0, '@lsp.type.enumMember', {})
set(0, '@lsp.type.event', {})
set(0, '@lsp.type.function', {})
set(0, '@lsp.type.interface', {})
set(0, '@lsp.type.keyword', {})
set(0, '@lsp.type.macro', {})
set(0, '@lsp.type.method', {})
set(0, '@lsp.type.modifier', {})
set(0, '@lsp.type.namespace', {})
set(0, '@lsp.type.number', {})
set(0, '@lsp.type.operator', {})
set(0, '@lsp.type.parameter', {})
set(0, '@lsp.type.property', {})
set(0, '@lsp.type.regexp', {})
set(0, '@lsp.type.string', {})
set(0, '@lsp.type.struct', {})
set(0, '@lsp.type.type', {})
set(0, '@lsp.type.typeParameter', {})
set(0, '@lsp.type.variable', {})
set(0, 'Macro', {})
set(0, 'MatchParen', {})
set(0, 'NonText', {})
set(0, 'NormalFloat', {})
set(0, 'NormalNC', {})
set(0, 'NvimAnd', {})
set(0, 'NvimArrow', {})
set(0, 'NvimAssignment', {})
set(0, 'NvimAssignmentWithAddition', {})
set(0, 'NvimAssignmentWithConcatenation', {})
set(0, 'NvimAssignmentWithSubtraction', {})
set(0, 'NvimAugmentedAssignment', {})
set(0, 'NvimBinaryMinus', {})
set(0, 'NvimBinaryOperator', {})
set(0, 'NvimBinaryPlus', {})
set(0, 'NvimCallingParenthesis', {})
set(0, 'NvimColon', {})
set(0, 'NvimComma', {})
set(0, 'NvimComparison', {})
set(0, 'NvimComparisonModifier', {})
set(0, 'NvimConcat', {})
set(0, 'NvimConcatOrSubscript', {})
set(0, 'NvimContainer', {})
set(0, 'NvimCurly', {})
set(0, 'NvimDict', {})
set(0, 'NvimDivision', {})
set(0, 'NvimDoubleQuotedBody', {})
set(0, 'NvimDoubleQuotedEscape', {})
set(0, 'NvimDoubleQuotedUnknownEscape', {})
set(0, 'NvimDoubleQuote', {})
set(0, 'NvimEnvironmentName', {})
set(0, 'NvimEnvironmentSigil', {})
set(0, 'NvimFigureBrace', {})
set(0, 'NvimFloat', {})
set(0, 'NvimInternalError', {})
set(0, 'NvimInvalidAnd', {})
set(0, 'NvimInvalidArrow', {})
set(0, 'NvimInvalidAssignment', {})
set(0, 'NvimInvalidAssignmentWithAddition', {})
set(0, 'NvimInvalidAssignmentWithConcatenation', {})
set(0, 'NvimInvalidAssignmentWithSubtraction', {})
set(0, 'NvimInvalidAugmentedAssignment', {})
set(0, 'NvimInvalidBinaryMinus', {})
set(0, 'NvimInvalidBinaryOperator', {})
set(0, 'NvimInvalidBinaryPlus', {})
set(0, 'NvimInvalidCallingParenthesis', {})
set(0, 'NvimInvalidColon', {})
set(0, 'NvimInvalidComma', {})
set(0, 'NvimInvalidComparison', {})
set(0, 'NvimInvalidComparisonModifier', {})
set(0, 'NvimInvalidConcat', {})
set(0, 'NvimInvalidConcatOrSubscript', {})
set(0, 'NvimInvalidContainer', {})
set(0, 'NvimInvalidCurly', {})
set(0, 'NvimInvalidDelimiter', {})
set(0, 'NvimInvalidDict', {})
set(0, 'NvimInvalidDivision', {})
set(0, 'NvimInvalidDoubleQuotedBody', {})
set(0, 'NvimInvalidDoubleQuotedEscape', {})
set(0, 'NvimInvalidDoubleQuotedUnknownEscape', {})
set(0, 'NvimInvalidDoubleQuote', {})
set(0, 'NvimInvalidEnvironmentName', {})
set(0, 'NvimInvalidEnvironmentSigil', {})
set(0, 'NvimInvalid', {})
set(0, 'NvimInvalidFigureBrace', {})
set(0, 'NvimInvalidFloat', {})
set(0, 'NvimInvalidLambda', {})
set(0, 'NvimInvalidList', {})
set(0, 'NvimInvalidMod', {})
set(0, 'NvimInvalidMultiplication', {})
set(0, 'NvimInvalidNestingParenthesis', {})
set(0, 'NvimInvalidNot', {})
set(0, 'NvimInvalidNumber', {})
set(0, 'NvimInvalidNumberPrefix', {})
set(0, 'NvimInvalidOperator', {})
set(0, 'NvimInvalidOptionName', {})
set(0, 'NvimInvalidOptionScopeDelimiter', {})
set(0, 'NvimInvalidOptionScope', {})
set(0, 'NvimInvalidOptionSigil', {})
set(0, 'NvimInvalidOr', {})
set(0, 'NvimInvalidParenthesis', {})
set(0, 'NvimInvalidPlainAssignment', {})
set(0, 'NvimInvalidRegister', {})
set(0, 'NvimInvalidSingleQuotedBody', {})
set(0, 'NvimInvalidSingleQuotedQuote', {})
set(0, 'NvimInvalidSingleQuotedUnknownEscape', {})
set(0, 'NvimInvalidSingleQuote', {})
set(0, 'NvimInvalidSpacing', {})
set(0, 'NvimInvalidStringBody', {})
set(0, 'NvimInvalidString', {})
set(0, 'NvimInvalidStringQuote', {})
set(0, 'NvimInvalidStringSpecial', {})
set(0, 'NvimInvalidSubscriptBracket', {})
set(0, 'NvimInvalidSubscriptColon', {})
set(0, 'NvimInvalidSubscript', {})
set(0, 'NvimInvalidTernaryColon', {})
set(0, 'NvimInvalidTernary', {})
set(0, 'NvimInvalidUnaryMinus', {})
set(0, 'NvimInvalidUnaryOperator', {})
set(0, 'NvimInvalidUnaryPlus', {})
set(0, 'NvimInvalidValue', {})
set(0, 'NvimLambda', {})
set(0, 'NvimList', {})
set(0, 'NvimMod', {})
set(0, 'NvimMultiplication', {})
set(0, 'NvimNestingParenthesis', {})
set(0, 'NvimNot', {})
set(0, 'NvimNumber', {})
set(0, 'NvimNumberPrefix', {})
set(0, 'NvimOperator', {})
set(0, 'NvimOptionName', {})
set(0, 'NvimOptionScopeDelimiter', {})
set(0, 'NvimOptionScope', {})
set(0, 'NvimOptionSigil', {})
set(0, 'NvimOr', {})
set(0, 'NvimParenthesis', {})
set(0, 'NvimPlainAssignment', {})
set(0, 'NvimRegister', {})
set(0, 'NvimSingleQuotedBody', {})
set(0, 'NvimSingleQuotedQuote', {})
set(0, 'NvimSingleQuotedUnknownEscape', {})
set(0, 'NvimSingleQuote', {})
set(0, 'NvimSpacing', {})
set(0, 'NvimStringBody', {})
set(0, 'NvimString', {})
set(0, 'NvimStringQuote', {})
set(0, 'NvimStringSpecial', {})
set(0, 'NvimSubscriptBracket', {})
set(0, 'NvimSubscriptColon', {})
set(0, 'NvimSubscript', {})
set(0, 'NvimTernaryColon', {})
set(0, 'NvimTernary', {})
set(0, 'NvimUnaryMinus', {})
set(0, 'NvimUnaryOperator', {})
set(0, 'NvimUnaryPlus', {})

-- Pmenu
set(0, 'Pmenu', { bg = c.mantle })
set(0, 'PmenuSel', { bg = c.dark_blue })
set(0, 'PmenuSbar', { bg = c.crust })
set(0, 'PmenuThumb', {})
set(0, 'PmenuExtra', {})
set(0, 'PmenuExtraSel', {})
set(0, 'PmenuKind', {})
set(0, 'PmenuKindSel', {})
set(0, 'PmenuMatch', {})
set(0, 'PmenuMatchSel', {})

set(0, 'PreCondit', {})
set(0, 'PreProc', { fg = c.purple })
set(0, 'Question', {})
set(0, 'QuickFixLine', {})
set(0, 'RedrawDebugClear', {})
set(0, 'RedrawDebugComposed', {})
set(0, 'RedrawDebugNormal', {})
set(0, 'RedrawDebugRecompose', {})
set(0, 'Repeat', {})

-- Search
set(0, 'Search', { bg = c.grey_10 })
set(0, 'IncSearch', { fg = c.text, bg = c.red_bright })
set(0, 'CurSearch', { link = 'IncSearch' })

set(0, 'SignColumn', {})
set(0, 'SnippetTabstop', {})
set(0, 'SpecialChar', {})
set(0, 'SpecialComment', {})
set(0, 'Special', {})
set(0, 'SpecialKey', { fg = c.red, bold = true })
set(0, 'SpellBad', {})
set(0, 'SpellCap', {})
set(0, 'SpellLocal', {})
set(0, 'SpellRare', {})

set(0, 'StorageClass', {})
set(0, 'Structure', {})
set(0, 'Substitute', {})
set(0, 'TabLine', {})
set(0, 'TabLineFill', {})
set(0, 'TabLineSel', {})

set(0, 'Tag', {})
set(0, 'TermCursor', {})
set(0, 'Title', {})
set(0, 'Todo', {})
set(0, 'Typedef', {})
set(0, 'Underlined', {})

set(0, 'VertSplit', {})

-- Visual
-- TODO: Check this after coloring all other elements
set(0, 'Visual', {  bg = c.grey_05 })
set(0, 'VisualNC', {})
set(0, 'VisualNOS', {})

-- Message
set(0, 'ErrorMsg', { fg = c.red })
set(0, 'WarningMsg', { fg = c.yellow, bold = true })
set(0, 'ModeMsg', { fg = c.green })
set(0, 'MoreMsg', {})
set(0, 'MsgArea', {})
set(0, 'MsgSeparator', {})

set(0, 'Whitespace', {})
set(0, 'WildMenu', {})
set(0, 'WinBar', {})
set(0, 'WinBarNC', {})
set(0, 'WinSeparator', { fg = c.grey_20 })

---------------
-- Nvim Tree --
---------------
set(0, 'NvimTreeFolderIcon', { fg = c.blue })
